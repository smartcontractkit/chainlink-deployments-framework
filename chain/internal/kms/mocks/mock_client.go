// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kmsmocks

import (
	"github.com/aws/aws-sdk-go/service/kms"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetPublicKey provides a mock function for the type MockClient
func (_mock *MockClient) GetPublicKey(input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *kms.GetPublicKeyOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(*kms.GetPublicKeyInput) *kms.GetPublicKeyOutput); ok {
		r0 = returnFunc(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kms.GetPublicKeyOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*kms.GetPublicKeyInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicKey'
type MockClient_GetPublicKey_Call struct {
	*mock.Call
}

// GetPublicKey is a helper method to define mock.On call
//   - input *kms.GetPublicKeyInput
func (_e *MockClient_Expecter) GetPublicKey(input interface{}) *MockClient_GetPublicKey_Call {
	return &MockClient_GetPublicKey_Call{Call: _e.mock.On("GetPublicKey", input)}
}

func (_c *MockClient_GetPublicKey_Call) Run(run func(input *kms.GetPublicKeyInput)) *MockClient_GetPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *kms.GetPublicKeyInput
		if args[0] != nil {
			arg0 = args[0].(*kms.GetPublicKeyInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_GetPublicKey_Call) Return(getPublicKeyOutput *kms.GetPublicKeyOutput, err error) *MockClient_GetPublicKey_Call {
	_c.Call.Return(getPublicKeyOutput, err)
	return _c
}

func (_c *MockClient_GetPublicKey_Call) RunAndReturn(run func(input *kms.GetPublicKeyInput) (*kms.GetPublicKeyOutput, error)) *MockClient_GetPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function for the type MockClient
func (_mock *MockClient) Sign(input *kms.SignInput) (*kms.SignOutput, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *kms.SignOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*kms.SignInput) (*kms.SignOutput, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(*kms.SignInput) *kms.SignOutput); ok {
		r0 = returnFunc(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kms.SignOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*kms.SignInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockClient_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - input *kms.SignInput
func (_e *MockClient_Expecter) Sign(input interface{}) *MockClient_Sign_Call {
	return &MockClient_Sign_Call{Call: _e.mock.On("Sign", input)}
}

func (_c *MockClient_Sign_Call) Run(run func(input *kms.SignInput)) *MockClient_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *kms.SignInput
		if args[0] != nil {
			arg0 = args[0].(*kms.SignInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Sign_Call) Return(signOutput *kms.SignOutput, err error) *MockClient_Sign_Call {
	_c.Call.Return(signOutput, err)
	return _c
}

func (_c *MockClient_Sign_Call) RunAndReturn(run func(input *kms.SignInput) (*kms.SignOutput, error)) *MockClient_Sign_Call {
	_c.Call.Return(run)
	return _c
}
