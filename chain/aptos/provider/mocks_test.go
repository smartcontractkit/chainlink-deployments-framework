// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package provider

import (
	"github.com/aptos-labs/aptos-go-sdk"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountGenerator creates a new instance of MockAccountGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountGenerator {
	mock := &MockAccountGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountGenerator is an autogenerated mock type for the AccountGenerator type
type MockAccountGenerator struct {
	mock.Mock
}

type MockAccountGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountGenerator) EXPECT() *MockAccountGenerator_Expecter {
	return &MockAccountGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockAccountGenerator
func (_mock *MockAccountGenerator) Generate() (*aptos.Account, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 *aptos.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*aptos.Account, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *aptos.Account); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aptos.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockAccountGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
func (_e *MockAccountGenerator_Expecter) Generate() *MockAccountGenerator_Generate_Call {
	return &MockAccountGenerator_Generate_Call{Call: _e.mock.On("Generate")}
}

func (_c *MockAccountGenerator_Generate_Call) Run(run func()) *MockAccountGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountGenerator_Generate_Call) Return(v *aptos.Account, err error) *MockAccountGenerator_Generate_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockAccountGenerator_Generate_Call) RunAndReturn(run func() (*aptos.Account, error)) *MockAccountGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}
