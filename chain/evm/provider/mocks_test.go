// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package provider

import (
	"context"
	"math/big"

	"github.com/ethereum/go-ethereum"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContractCaller creates a new instance of MockContractCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContractCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContractCaller {
	mock := &MockContractCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContractCaller is an autogenerated mock type for the ContractCaller type
type MockContractCaller struct {
	mock.Mock
}

type MockContractCaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContractCaller) EXPECT() *MockContractCaller_Expecter {
	return &MockContractCaller_Expecter{mock: &_m.Mock}
}

// CallContract provides a mock function for the type MockContractCaller
func (_mock *MockContractCaller) CallContract(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	ret := _mock.Called(ctx, call, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) ([]byte, error)); ok {
		return returnFunc(ctx, call, blockNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) []byte); ok {
		r0 = returnFunc(ctx, call, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ethereum.CallMsg, *big.Int) error); ok {
		r1 = returnFunc(ctx, call, blockNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockContractCaller_CallContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContract'
type MockContractCaller_CallContract_Call struct {
	*mock.Call
}

// CallContract is a helper method to define mock.On call
//   - ctx context.Context
//   - call ethereum.CallMsg
//   - blockNumber *big.Int
func (_e *MockContractCaller_Expecter) CallContract(ctx interface{}, call interface{}, blockNumber interface{}) *MockContractCaller_CallContract_Call {
	return &MockContractCaller_CallContract_Call{Call: _e.mock.On("CallContract", ctx, call, blockNumber)}
}

func (_c *MockContractCaller_CallContract_Call) Run(run func(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int)) *MockContractCaller_CallContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ethereum.CallMsg
		if args[1] != nil {
			arg1 = args[1].(ethereum.CallMsg)
		}
		var arg2 *big.Int
		if args[2] != nil {
			arg2 = args[2].(*big.Int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockContractCaller_CallContract_Call) Return(bytes []byte, err error) *MockContractCaller_CallContract_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockContractCaller_CallContract_Call) RunAndReturn(run func(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error)) *MockContractCaller_CallContract_Call {
	_c.Call.Return(run)
	return _c
}
