// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package runtime

import (
	"github.com/smartcontractkit/chainlink-deployments-framework/deployment"
	mock "github.com/stretchr/testify/mock"
)

// NewMockExecutable creates a new instance of MockExecutable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutable {
	mock := &MockExecutable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExecutable is an autogenerated mock type for the Executable type
type MockExecutable struct {
	mock.Mock
}

type MockExecutable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutable) EXPECT() *MockExecutable_Expecter {
	return &MockExecutable_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type MockExecutable
func (_mock *MockExecutable) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockExecutable_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockExecutable_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockExecutable_Expecter) ID() *MockExecutable_ID_Call {
	return &MockExecutable_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockExecutable_ID_Call) Run(run func()) *MockExecutable_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutable_ID_Call) Return(s string) *MockExecutable_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockExecutable_ID_Call) RunAndReturn(run func() string) *MockExecutable_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockExecutable
func (_mock *MockExecutable) Run(e deployment.Environment, state *State) error {
	ret := _mock.Called(e, state)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(deployment.Environment, *State) error); ok {
		r0 = returnFunc(e, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExecutable_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockExecutable_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - e deployment.Environment
//   - state *State
func (_e *MockExecutable_Expecter) Run(e interface{}, state interface{}) *MockExecutable_Run_Call {
	return &MockExecutable_Run_Call{Call: _e.mock.On("Run", e, state)}
}

func (_c *MockExecutable_Run_Call) Run(run func(e deployment.Environment, state *State)) *MockExecutable_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 deployment.Environment
		if args[0] != nil {
			arg0 = args[0].(deployment.Environment)
		}
		var arg1 *State
		if args[1] != nil {
			arg1 = args[1].(*State)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExecutable_Run_Call) Return(err error) *MockExecutable_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExecutable_Run_Call) RunAndReturn(run func(e deployment.Environment, state *State) error) *MockExecutable_Run_Call {
	_c.Call.Return(run)
	return _c
}
