// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package runtime

import (
	"context"

	"github.com/smartcontractkit/mcms"
	mock "github.com/stretchr/testify/mock"
)

// newMockProposalExecutor creates a new instance of mockProposalExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockProposalExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockProposalExecutor {
	mock := &mockProposalExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockProposalExecutor is an autogenerated mock type for the proposalExecutor type
type mockProposalExecutor struct {
	mock.Mock
}

type mockProposalExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockProposalExecutor) EXPECT() *mockProposalExecutor_Expecter {
	return &mockProposalExecutor_Expecter{mock: &_m.Mock}
}

// ExecuteMCMS provides a mock function for the type mockProposalExecutor
func (_mock *mockProposalExecutor) ExecuteMCMS(ctx context.Context, proposal *mcms.Proposal) error {
	ret := _mock.Called(ctx, proposal)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteMCMS")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *mcms.Proposal) error); ok {
		r0 = returnFunc(ctx, proposal)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockProposalExecutor_ExecuteMCMS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteMCMS'
type mockProposalExecutor_ExecuteMCMS_Call struct {
	*mock.Call
}

// ExecuteMCMS is a helper method to define mock.On call
//   - ctx context.Context
//   - proposal *mcms.Proposal
func (_e *mockProposalExecutor_Expecter) ExecuteMCMS(ctx interface{}, proposal interface{}) *mockProposalExecutor_ExecuteMCMS_Call {
	return &mockProposalExecutor_ExecuteMCMS_Call{Call: _e.mock.On("ExecuteMCMS", ctx, proposal)}
}

func (_c *mockProposalExecutor_ExecuteMCMS_Call) Run(run func(ctx context.Context, proposal *mcms.Proposal)) *mockProposalExecutor_ExecuteMCMS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *mcms.Proposal
		if args[1] != nil {
			arg1 = args[1].(*mcms.Proposal)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockProposalExecutor_ExecuteMCMS_Call) Return(err error) *mockProposalExecutor_ExecuteMCMS_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockProposalExecutor_ExecuteMCMS_Call) RunAndReturn(run func(ctx context.Context, proposal *mcms.Proposal) error) *mockProposalExecutor_ExecuteMCMS_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTimelock provides a mock function for the type mockProposalExecutor
func (_mock *mockProposalExecutor) ExecuteTimelock(ctx context.Context, proposal *mcms.TimelockProposal) error {
	ret := _mock.Called(ctx, proposal)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTimelock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *mcms.TimelockProposal) error); ok {
		r0 = returnFunc(ctx, proposal)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockProposalExecutor_ExecuteTimelock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTimelock'
type mockProposalExecutor_ExecuteTimelock_Call struct {
	*mock.Call
}

// ExecuteTimelock is a helper method to define mock.On call
//   - ctx context.Context
//   - proposal *mcms.TimelockProposal
func (_e *mockProposalExecutor_Expecter) ExecuteTimelock(ctx interface{}, proposal interface{}) *mockProposalExecutor_ExecuteTimelock_Call {
	return &mockProposalExecutor_ExecuteTimelock_Call{Call: _e.mock.On("ExecuteTimelock", ctx, proposal)}
}

func (_c *mockProposalExecutor_ExecuteTimelock_Call) Run(run func(ctx context.Context, proposal *mcms.TimelockProposal)) *mockProposalExecutor_ExecuteTimelock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *mcms.TimelockProposal
		if args[1] != nil {
			arg1 = args[1].(*mcms.TimelockProposal)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockProposalExecutor_ExecuteTimelock_Call) Return(err error) *mockProposalExecutor_ExecuteTimelock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockProposalExecutor_ExecuteTimelock_Call) RunAndReturn(run func(ctx context.Context, proposal *mcms.TimelockProposal) error) *mockProposalExecutor_ExecuteTimelock_Call {
	_c.Call.Return(run)
	return _c
}
