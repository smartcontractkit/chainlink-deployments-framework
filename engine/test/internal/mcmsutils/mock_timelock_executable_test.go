// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mcmsutils

import (
	"context"

	"github.com/smartcontractkit/mcms"
	"github.com/smartcontractkit/mcms/types"
	mock "github.com/stretchr/testify/mock"
)

// newMockTimelockExecutable creates a new instance of mockTimelockExecutable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTimelockExecutable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTimelockExecutable {
	mock := &mockTimelockExecutable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockTimelockExecutable is an autogenerated mock type for the timelockExecutable type
type mockTimelockExecutable struct {
	mock.Mock
}

type mockTimelockExecutable_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTimelockExecutable) EXPECT() *mockTimelockExecutable_Expecter {
	return &mockTimelockExecutable_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type mockTimelockExecutable
func (_mock *mockTimelockExecutable) Execute(ctx context.Context, index int, opts ...mcms.Option) (types.TransactionResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, index, opts)
	} else {
		tmpRet = _mock.Called(ctx, index)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 types.TransactionResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, ...mcms.Option) (types.TransactionResult, error)); ok {
		return returnFunc(ctx, index, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, ...mcms.Option) types.TransactionResult); ok {
		r0 = returnFunc(ctx, index, opts...)
	} else {
		r0 = ret.Get(0).(types.TransactionResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, ...mcms.Option) error); ok {
		r1 = returnFunc(ctx, index, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockTimelockExecutable_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockTimelockExecutable_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - index int
//   - opts ...mcms.Option
func (_e *mockTimelockExecutable_Expecter) Execute(ctx interface{}, index interface{}, opts ...interface{}) *mockTimelockExecutable_Execute_Call {
	return &mockTimelockExecutable_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{ctx, index}, opts...)...)}
}

func (_c *mockTimelockExecutable_Execute_Call) Run(run func(ctx context.Context, index int, opts ...mcms.Option)) *mockTimelockExecutable_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []mcms.Option
		var variadicArgs []mcms.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]mcms.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *mockTimelockExecutable_Execute_Call) Return(transactionResult types.TransactionResult, err error) *mockTimelockExecutable_Execute_Call {
	_c.Call.Return(transactionResult, err)
	return _c
}

func (_c *mockTimelockExecutable_Execute_Call) RunAndReturn(run func(ctx context.Context, index int, opts ...mcms.Option) (types.TransactionResult, error)) *mockTimelockExecutable_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// IsReady provides a mock function for the type mockTimelockExecutable
func (_mock *mockTimelockExecutable) IsReady(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsReady")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockTimelockExecutable_IsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsReady'
type mockTimelockExecutable_IsReady_Call struct {
	*mock.Call
}

// IsReady is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockTimelockExecutable_Expecter) IsReady(ctx interface{}) *mockTimelockExecutable_IsReady_Call {
	return &mockTimelockExecutable_IsReady_Call{Call: _e.mock.On("IsReady", ctx)}
}

func (_c *mockTimelockExecutable_IsReady_Call) Run(run func(ctx context.Context)) *mockTimelockExecutable_IsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockTimelockExecutable_IsReady_Call) Return(err error) *mockTimelockExecutable_IsReady_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockTimelockExecutable_IsReady_Call) RunAndReturn(run func(ctx context.Context) error) *mockTimelockExecutable_IsReady_Call {
	_c.Call.Return(run)
	return _c
}
