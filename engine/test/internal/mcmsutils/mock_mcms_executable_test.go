// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mcmsutils

import (
	"context"

	"github.com/smartcontractkit/mcms/types"
	mock "github.com/stretchr/testify/mock"
)

// newMockMcmsExecutable creates a new instance of mockMcmsExecutable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMcmsExecutable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMcmsExecutable {
	mock := &mockMcmsExecutable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockMcmsExecutable is an autogenerated mock type for the mcmsExecutable type
type mockMcmsExecutable struct {
	mock.Mock
}

type mockMcmsExecutable_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMcmsExecutable) EXPECT() *mockMcmsExecutable_Expecter {
	return &mockMcmsExecutable_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type mockMcmsExecutable
func (_mock *mockMcmsExecutable) Execute(ctx context.Context, index int) (types.TransactionResult, error) {
	ret := _mock.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 types.TransactionResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (types.TransactionResult, error)); ok {
		return returnFunc(ctx, index)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) types.TransactionResult); ok {
		r0 = returnFunc(ctx, index)
	} else {
		r0 = ret.Get(0).(types.TransactionResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, index)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockMcmsExecutable_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockMcmsExecutable_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - index int
func (_e *mockMcmsExecutable_Expecter) Execute(ctx interface{}, index interface{}) *mockMcmsExecutable_Execute_Call {
	return &mockMcmsExecutable_Execute_Call{Call: _e.mock.On("Execute", ctx, index)}
}

func (_c *mockMcmsExecutable_Execute_Call) Run(run func(ctx context.Context, index int)) *mockMcmsExecutable_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockMcmsExecutable_Execute_Call) Return(transactionResult types.TransactionResult, err error) *mockMcmsExecutable_Execute_Call {
	_c.Call.Return(transactionResult, err)
	return _c
}

func (_c *mockMcmsExecutable_Execute_Call) RunAndReturn(run func(ctx context.Context, index int) (types.TransactionResult, error)) *mockMcmsExecutable_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// SetRoot provides a mock function for the type mockMcmsExecutable
func (_mock *mockMcmsExecutable) SetRoot(ctx context.Context, chainSelector types.ChainSelector) (types.TransactionResult, error) {
	ret := _mock.Called(ctx, chainSelector)

	if len(ret) == 0 {
		panic("no return value specified for SetRoot")
	}

	var r0 types.TransactionResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.ChainSelector) (types.TransactionResult, error)); ok {
		return returnFunc(ctx, chainSelector)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.ChainSelector) types.TransactionResult); ok {
		r0 = returnFunc(ctx, chainSelector)
	} else {
		r0 = ret.Get(0).(types.TransactionResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.ChainSelector) error); ok {
		r1 = returnFunc(ctx, chainSelector)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockMcmsExecutable_SetRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoot'
type mockMcmsExecutable_SetRoot_Call struct {
	*mock.Call
}

// SetRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - chainSelector types.ChainSelector
func (_e *mockMcmsExecutable_Expecter) SetRoot(ctx interface{}, chainSelector interface{}) *mockMcmsExecutable_SetRoot_Call {
	return &mockMcmsExecutable_SetRoot_Call{Call: _e.mock.On("SetRoot", ctx, chainSelector)}
}

func (_c *mockMcmsExecutable_SetRoot_Call) Run(run func(ctx context.Context, chainSelector types.ChainSelector)) *mockMcmsExecutable_SetRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.ChainSelector
		if args[1] != nil {
			arg1 = args[1].(types.ChainSelector)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockMcmsExecutable_SetRoot_Call) Return(transactionResult types.TransactionResult, err error) *mockMcmsExecutable_SetRoot_Call {
	_c.Call.Return(transactionResult, err)
	return _c
}

func (_c *mockMcmsExecutable_SetRoot_Call) RunAndReturn(run func(ctx context.Context, chainSelector types.ChainSelector) (types.TransactionResult, error)) *mockMcmsExecutable_SetRoot_Call {
	_c.Call.Return(run)
	return _c
}
