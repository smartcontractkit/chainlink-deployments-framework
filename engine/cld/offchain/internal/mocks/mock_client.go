// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/smartcontractkit/chainlink-protos/job-distributor/v1/csa"
	"github.com/smartcontractkit/chainlink-protos/job-distributor/v1/job"
	"github.com/smartcontractkit/chainlink-protos/job-distributor/v1/node"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// BatchProposeJob provides a mock function for the type MockClient
func (_mock *MockClient) BatchProposeJob(ctx context.Context, in *job.BatchProposeJobRequest, opts ...grpc.CallOption) (*job.BatchProposeJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for BatchProposeJob")
	}

	var r0 *job.BatchProposeJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.BatchProposeJobRequest, ...grpc.CallOption) (*job.BatchProposeJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.BatchProposeJobRequest, ...grpc.CallOption) *job.BatchProposeJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.BatchProposeJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.BatchProposeJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_BatchProposeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchProposeJob'
type MockClient_BatchProposeJob_Call struct {
	*mock.Call
}

// BatchProposeJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.BatchProposeJobRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) BatchProposeJob(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_BatchProposeJob_Call {
	return &MockClient_BatchProposeJob_Call{Call: _e.mock.On("BatchProposeJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_BatchProposeJob_Call) Run(run func(ctx context.Context, in *job.BatchProposeJobRequest, opts ...grpc.CallOption)) *MockClient_BatchProposeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.BatchProposeJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.BatchProposeJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_BatchProposeJob_Call) Return(batchProposeJobResponse *job.BatchProposeJobResponse, err error) *MockClient_BatchProposeJob_Call {
	_c.Call.Return(batchProposeJobResponse, err)
	return _c
}

func (_c *MockClient_BatchProposeJob_Call) RunAndReturn(run func(ctx context.Context, in *job.BatchProposeJobRequest, opts ...grpc.CallOption) (*job.BatchProposeJobResponse, error)) *MockClient_BatchProposeJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function for the type MockClient
func (_mock *MockClient) DeleteJob(ctx context.Context, in *job.DeleteJobRequest, opts ...grpc.CallOption) (*job.DeleteJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 *job.DeleteJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.DeleteJobRequest, ...grpc.CallOption) (*job.DeleteJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.DeleteJobRequest, ...grpc.CallOption) *job.DeleteJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.DeleteJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.DeleteJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockClient_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.DeleteJobRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) DeleteJob(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_DeleteJob_Call {
	return &MockClient_DeleteJob_Call{Call: _e.mock.On("DeleteJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_DeleteJob_Call) Run(run func(ctx context.Context, in *job.DeleteJobRequest, opts ...grpc.CallOption)) *MockClient_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.DeleteJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.DeleteJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DeleteJob_Call) Return(deleteJobResponse *job.DeleteJobResponse, err error) *MockClient_DeleteJob_Call {
	_c.Call.Return(deleteJobResponse, err)
	return _c
}

func (_c *MockClient_DeleteJob_Call) RunAndReturn(run func(ctx context.Context, in *job.DeleteJobRequest, opts ...grpc.CallOption) (*job.DeleteJobResponse, error)) *MockClient_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// DisableNode provides a mock function for the type MockClient
func (_mock *MockClient) DisableNode(ctx context.Context, in *node.DisableNodeRequest, opts ...grpc.CallOption) (*node.DisableNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DisableNode")
	}

	var r0 *node.DisableNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.DisableNodeRequest, ...grpc.CallOption) (*node.DisableNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.DisableNodeRequest, ...grpc.CallOption) *node.DisableNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.DisableNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.DisableNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_DisableNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableNode'
type MockClient_DisableNode_Call struct {
	*mock.Call
}

// DisableNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.DisableNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) DisableNode(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_DisableNode_Call {
	return &MockClient_DisableNode_Call{Call: _e.mock.On("DisableNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_DisableNode_Call) Run(run func(ctx context.Context, in *node.DisableNodeRequest, opts ...grpc.CallOption)) *MockClient_DisableNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.DisableNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.DisableNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_DisableNode_Call) Return(disableNodeResponse *node.DisableNodeResponse, err error) *MockClient_DisableNode_Call {
	_c.Call.Return(disableNodeResponse, err)
	return _c
}

func (_c *MockClient_DisableNode_Call) RunAndReturn(run func(ctx context.Context, in *node.DisableNodeRequest, opts ...grpc.CallOption) (*node.DisableNodeResponse, error)) *MockClient_DisableNode_Call {
	_c.Call.Return(run)
	return _c
}

// EnableNode provides a mock function for the type MockClient
func (_mock *MockClient) EnableNode(ctx context.Context, in *node.EnableNodeRequest, opts ...grpc.CallOption) (*node.EnableNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EnableNode")
	}

	var r0 *node.EnableNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.EnableNodeRequest, ...grpc.CallOption) (*node.EnableNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.EnableNodeRequest, ...grpc.CallOption) *node.EnableNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.EnableNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.EnableNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_EnableNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableNode'
type MockClient_EnableNode_Call struct {
	*mock.Call
}

// EnableNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.EnableNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) EnableNode(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_EnableNode_Call {
	return &MockClient_EnableNode_Call{Call: _e.mock.On("EnableNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_EnableNode_Call) Run(run func(ctx context.Context, in *node.EnableNodeRequest, opts ...grpc.CallOption)) *MockClient_EnableNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.EnableNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.EnableNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_EnableNode_Call) Return(enableNodeResponse *node.EnableNodeResponse, err error) *MockClient_EnableNode_Call {
	_c.Call.Return(enableNodeResponse, err)
	return _c
}

func (_c *MockClient_EnableNode_Call) RunAndReturn(run func(ctx context.Context, in *node.EnableNodeRequest, opts ...grpc.CallOption) (*node.EnableNodeResponse, error)) *MockClient_EnableNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function for the type MockClient
func (_mock *MockClient) GetJob(ctx context.Context, in *job.GetJobRequest, opts ...grpc.CallOption) (*job.GetJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *job.GetJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetJobRequest, ...grpc.CallOption) (*job.GetJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetJobRequest, ...grpc.CallOption) *job.GetJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.GetJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.GetJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockClient_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.GetJobRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) GetJob(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_GetJob_Call {
	return &MockClient_GetJob_Call{Call: _e.mock.On("GetJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_GetJob_Call) Run(run func(ctx context.Context, in *job.GetJobRequest, opts ...grpc.CallOption)) *MockClient_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.GetJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.GetJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetJob_Call) Return(getJobResponse *job.GetJobResponse, err error) *MockClient_GetJob_Call {
	_c.Call.Return(getJobResponse, err)
	return _c
}

func (_c *MockClient_GetJob_Call) RunAndReturn(run func(ctx context.Context, in *job.GetJobRequest, opts ...grpc.CallOption) (*job.GetJobResponse, error)) *MockClient_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeypair provides a mock function for the type MockClient
func (_mock *MockClient) GetKeypair(ctx context.Context, in *csa.GetKeypairRequest, opts ...grpc.CallOption) (*csa.GetKeypairResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetKeypair")
	}

	var r0 *csa.GetKeypairResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.GetKeypairRequest, ...grpc.CallOption) (*csa.GetKeypairResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.GetKeypairRequest, ...grpc.CallOption) *csa.GetKeypairResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csa.GetKeypairResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *csa.GetKeypairRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetKeypair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeypair'
type MockClient_GetKeypair_Call struct {
	*mock.Call
}

// GetKeypair is a helper method to define mock.On call
//   - ctx context.Context
//   - in *csa.GetKeypairRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) GetKeypair(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_GetKeypair_Call {
	return &MockClient_GetKeypair_Call{Call: _e.mock.On("GetKeypair",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_GetKeypair_Call) Run(run func(ctx context.Context, in *csa.GetKeypairRequest, opts ...grpc.CallOption)) *MockClient_GetKeypair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *csa.GetKeypairRequest
		if args[1] != nil {
			arg1 = args[1].(*csa.GetKeypairRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetKeypair_Call) Return(getKeypairResponse *csa.GetKeypairResponse, err error) *MockClient_GetKeypair_Call {
	_c.Call.Return(getKeypairResponse, err)
	return _c
}

func (_c *MockClient_GetKeypair_Call) RunAndReturn(run func(ctx context.Context, in *csa.GetKeypairRequest, opts ...grpc.CallOption) (*csa.GetKeypairResponse, error)) *MockClient_GetKeypair_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function for the type MockClient
func (_mock *MockClient) GetNode(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 *node.GetNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.GetNodeRequest, ...grpc.CallOption) (*node.GetNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.GetNodeRequest, ...grpc.CallOption) *node.GetNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.GetNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.GetNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type MockClient_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.GetNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) GetNode(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_GetNode_Call {
	return &MockClient_GetNode_Call{Call: _e.mock.On("GetNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_GetNode_Call) Run(run func(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption)) *MockClient_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.GetNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.GetNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetNode_Call) Return(getNodeResponse *node.GetNodeResponse, err error) *MockClient_GetNode_Call {
	_c.Call.Return(getNodeResponse, err)
	return _c
}

func (_c *MockClient_GetNode_Call) RunAndReturn(run func(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error)) *MockClient_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetProposal provides a mock function for the type MockClient
func (_mock *MockClient) GetProposal(ctx context.Context, in *job.GetProposalRequest, opts ...grpc.CallOption) (*job.GetProposalResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProposal")
	}

	var r0 *job.GetProposalResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetProposalRequest, ...grpc.CallOption) (*job.GetProposalResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetProposalRequest, ...grpc.CallOption) *job.GetProposalResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.GetProposalResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.GetProposalRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposal'
type MockClient_GetProposal_Call struct {
	*mock.Call
}

// GetProposal is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.GetProposalRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) GetProposal(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_GetProposal_Call {
	return &MockClient_GetProposal_Call{Call: _e.mock.On("GetProposal",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_GetProposal_Call) Run(run func(ctx context.Context, in *job.GetProposalRequest, opts ...grpc.CallOption)) *MockClient_GetProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.GetProposalRequest
		if args[1] != nil {
			arg1 = args[1].(*job.GetProposalRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_GetProposal_Call) Return(getProposalResponse *job.GetProposalResponse, err error) *MockClient_GetProposal_Call {
	_c.Call.Return(getProposalResponse, err)
	return _c
}

func (_c *MockClient_GetProposal_Call) RunAndReturn(run func(ctx context.Context, in *job.GetProposalRequest, opts ...grpc.CallOption) (*job.GetProposalResponse, error)) *MockClient_GetProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobs provides a mock function for the type MockClient
func (_mock *MockClient) ListJobs(ctx context.Context, in *job.ListJobsRequest, opts ...grpc.CallOption) (*job.ListJobsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *job.ListJobsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListJobsRequest, ...grpc.CallOption) (*job.ListJobsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListJobsRequest, ...grpc.CallOption) *job.ListJobsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.ListJobsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.ListJobsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobs'
type MockClient_ListJobs_Call struct {
	*mock.Call
}

// ListJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.ListJobsRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) ListJobs(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_ListJobs_Call {
	return &MockClient_ListJobs_Call{Call: _e.mock.On("ListJobs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_ListJobs_Call) Run(run func(ctx context.Context, in *job.ListJobsRequest, opts ...grpc.CallOption)) *MockClient_ListJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.ListJobsRequest
		if args[1] != nil {
			arg1 = args[1].(*job.ListJobsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListJobs_Call) Return(listJobsResponse *job.ListJobsResponse, err error) *MockClient_ListJobs_Call {
	_c.Call.Return(listJobsResponse, err)
	return _c
}

func (_c *MockClient_ListJobs_Call) RunAndReturn(run func(ctx context.Context, in *job.ListJobsRequest, opts ...grpc.CallOption) (*job.ListJobsResponse, error)) *MockClient_ListJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListKeypairs provides a mock function for the type MockClient
func (_mock *MockClient) ListKeypairs(ctx context.Context, in *csa.ListKeypairsRequest, opts ...grpc.CallOption) (*csa.ListKeypairsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKeypairs")
	}

	var r0 *csa.ListKeypairsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.ListKeypairsRequest, ...grpc.CallOption) (*csa.ListKeypairsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.ListKeypairsRequest, ...grpc.CallOption) *csa.ListKeypairsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csa.ListKeypairsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *csa.ListKeypairsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListKeypairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKeypairs'
type MockClient_ListKeypairs_Call struct {
	*mock.Call
}

// ListKeypairs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *csa.ListKeypairsRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) ListKeypairs(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_ListKeypairs_Call {
	return &MockClient_ListKeypairs_Call{Call: _e.mock.On("ListKeypairs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_ListKeypairs_Call) Run(run func(ctx context.Context, in *csa.ListKeypairsRequest, opts ...grpc.CallOption)) *MockClient_ListKeypairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *csa.ListKeypairsRequest
		if args[1] != nil {
			arg1 = args[1].(*csa.ListKeypairsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListKeypairs_Call) Return(listKeypairsResponse *csa.ListKeypairsResponse, err error) *MockClient_ListKeypairs_Call {
	_c.Call.Return(listKeypairsResponse, err)
	return _c
}

func (_c *MockClient_ListKeypairs_Call) RunAndReturn(run func(ctx context.Context, in *csa.ListKeypairsRequest, opts ...grpc.CallOption) (*csa.ListKeypairsResponse, error)) *MockClient_ListKeypairs_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodeChainConfigs provides a mock function for the type MockClient
func (_mock *MockClient) ListNodeChainConfigs(ctx context.Context, in *node.ListNodeChainConfigsRequest, opts ...grpc.CallOption) (*node.ListNodeChainConfigsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListNodeChainConfigs")
	}

	var r0 *node.ListNodeChainConfigsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodeChainConfigsRequest, ...grpc.CallOption) (*node.ListNodeChainConfigsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodeChainConfigsRequest, ...grpc.CallOption) *node.ListNodeChainConfigsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.ListNodeChainConfigsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.ListNodeChainConfigsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListNodeChainConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodeChainConfigs'
type MockClient_ListNodeChainConfigs_Call struct {
	*mock.Call
}

// ListNodeChainConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.ListNodeChainConfigsRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) ListNodeChainConfigs(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_ListNodeChainConfigs_Call {
	return &MockClient_ListNodeChainConfigs_Call{Call: _e.mock.On("ListNodeChainConfigs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_ListNodeChainConfigs_Call) Run(run func(ctx context.Context, in *node.ListNodeChainConfigsRequest, opts ...grpc.CallOption)) *MockClient_ListNodeChainConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.ListNodeChainConfigsRequest
		if args[1] != nil {
			arg1 = args[1].(*node.ListNodeChainConfigsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListNodeChainConfigs_Call) Return(listNodeChainConfigsResponse *node.ListNodeChainConfigsResponse, err error) *MockClient_ListNodeChainConfigs_Call {
	_c.Call.Return(listNodeChainConfigsResponse, err)
	return _c
}

func (_c *MockClient_ListNodeChainConfigs_Call) RunAndReturn(run func(ctx context.Context, in *node.ListNodeChainConfigsRequest, opts ...grpc.CallOption) (*node.ListNodeChainConfigsResponse, error)) *MockClient_ListNodeChainConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function for the type MockClient
func (_mock *MockClient) ListNodes(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 *node.ListNodesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodesRequest, ...grpc.CallOption) (*node.ListNodesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodesRequest, ...grpc.CallOption) *node.ListNodesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.ListNodesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.ListNodesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockClient_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.ListNodesRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) ListNodes(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_ListNodes_Call {
	return &MockClient_ListNodes_Call{Call: _e.mock.On("ListNodes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_ListNodes_Call) Run(run func(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption)) *MockClient_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.ListNodesRequest
		if args[1] != nil {
			arg1 = args[1].(*node.ListNodesRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListNodes_Call) Return(listNodesResponse *node.ListNodesResponse, err error) *MockClient_ListNodes_Call {
	_c.Call.Return(listNodesResponse, err)
	return _c
}

func (_c *MockClient_ListNodes_Call) RunAndReturn(run func(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error)) *MockClient_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ListProposals provides a mock function for the type MockClient
func (_mock *MockClient) ListProposals(ctx context.Context, in *job.ListProposalsRequest, opts ...grpc.CallOption) (*job.ListProposalsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListProposals")
	}

	var r0 *job.ListProposalsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListProposalsRequest, ...grpc.CallOption) (*job.ListProposalsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListProposalsRequest, ...grpc.CallOption) *job.ListProposalsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.ListProposalsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.ListProposalsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListProposals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProposals'
type MockClient_ListProposals_Call struct {
	*mock.Call
}

// ListProposals is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.ListProposalsRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) ListProposals(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_ListProposals_Call {
	return &MockClient_ListProposals_Call{Call: _e.mock.On("ListProposals",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_ListProposals_Call) Run(run func(ctx context.Context, in *job.ListProposalsRequest, opts ...grpc.CallOption)) *MockClient_ListProposals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.ListProposalsRequest
		if args[1] != nil {
			arg1 = args[1].(*job.ListProposalsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ListProposals_Call) Return(listProposalsResponse *job.ListProposalsResponse, err error) *MockClient_ListProposals_Call {
	_c.Call.Return(listProposalsResponse, err)
	return _c
}

func (_c *MockClient_ListProposals_Call) RunAndReturn(run func(ctx context.Context, in *job.ListProposalsRequest, opts ...grpc.CallOption) (*job.ListProposalsResponse, error)) *MockClient_ListProposals_Call {
	_c.Call.Return(run)
	return _c
}

// ProposeJob provides a mock function for the type MockClient
func (_mock *MockClient) ProposeJob(ctx context.Context, in *job.ProposeJobRequest, opts ...grpc.CallOption) (*job.ProposeJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ProposeJob")
	}

	var r0 *job.ProposeJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ProposeJobRequest, ...grpc.CallOption) (*job.ProposeJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ProposeJobRequest, ...grpc.CallOption) *job.ProposeJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.ProposeJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.ProposeJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ProposeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProposeJob'
type MockClient_ProposeJob_Call struct {
	*mock.Call
}

// ProposeJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.ProposeJobRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) ProposeJob(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_ProposeJob_Call {
	return &MockClient_ProposeJob_Call{Call: _e.mock.On("ProposeJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_ProposeJob_Call) Run(run func(ctx context.Context, in *job.ProposeJobRequest, opts ...grpc.CallOption)) *MockClient_ProposeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.ProposeJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.ProposeJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_ProposeJob_Call) Return(proposeJobResponse *job.ProposeJobResponse, err error) *MockClient_ProposeJob_Call {
	_c.Call.Return(proposeJobResponse, err)
	return _c
}

func (_c *MockClient_ProposeJob_Call) RunAndReturn(run func(ctx context.Context, in *job.ProposeJobRequest, opts ...grpc.CallOption) (*job.ProposeJobResponse, error)) *MockClient_ProposeJob_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNode provides a mock function for the type MockClient
func (_mock *MockClient) RegisterNode(ctx context.Context, in *node.RegisterNodeRequest, opts ...grpc.CallOption) (*node.RegisterNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RegisterNode")
	}

	var r0 *node.RegisterNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.RegisterNodeRequest, ...grpc.CallOption) (*node.RegisterNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.RegisterNodeRequest, ...grpc.CallOption) *node.RegisterNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.RegisterNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.RegisterNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_RegisterNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNode'
type MockClient_RegisterNode_Call struct {
	*mock.Call
}

// RegisterNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.RegisterNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) RegisterNode(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_RegisterNode_Call {
	return &MockClient_RegisterNode_Call{Call: _e.mock.On("RegisterNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_RegisterNode_Call) Run(run func(ctx context.Context, in *node.RegisterNodeRequest, opts ...grpc.CallOption)) *MockClient_RegisterNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.RegisterNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.RegisterNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_RegisterNode_Call) Return(registerNodeResponse *node.RegisterNodeResponse, err error) *MockClient_RegisterNode_Call {
	_c.Call.Return(registerNodeResponse, err)
	return _c
}

func (_c *MockClient_RegisterNode_Call) RunAndReturn(run func(ctx context.Context, in *node.RegisterNodeRequest, opts ...grpc.CallOption) (*node.RegisterNodeResponse, error)) *MockClient_RegisterNode_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeJob provides a mock function for the type MockClient
func (_mock *MockClient) RevokeJob(ctx context.Context, in *job.RevokeJobRequest, opts ...grpc.CallOption) (*job.RevokeJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RevokeJob")
	}

	var r0 *job.RevokeJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.RevokeJobRequest, ...grpc.CallOption) (*job.RevokeJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.RevokeJobRequest, ...grpc.CallOption) *job.RevokeJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.RevokeJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.RevokeJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_RevokeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeJob'
type MockClient_RevokeJob_Call struct {
	*mock.Call
}

// RevokeJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.RevokeJobRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) RevokeJob(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_RevokeJob_Call {
	return &MockClient_RevokeJob_Call{Call: _e.mock.On("RevokeJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_RevokeJob_Call) Run(run func(ctx context.Context, in *job.RevokeJobRequest, opts ...grpc.CallOption)) *MockClient_RevokeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.RevokeJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.RevokeJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_RevokeJob_Call) Return(revokeJobResponse *job.RevokeJobResponse, err error) *MockClient_RevokeJob_Call {
	_c.Call.Return(revokeJobResponse, err)
	return _c
}

func (_c *MockClient_RevokeJob_Call) RunAndReturn(run func(ctx context.Context, in *job.RevokeJobRequest, opts ...grpc.CallOption) (*job.RevokeJobResponse, error)) *MockClient_RevokeJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJob provides a mock function for the type MockClient
func (_mock *MockClient) UpdateJob(ctx context.Context, in *job.UpdateJobRequest, opts ...grpc.CallOption) (*job.UpdateJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *job.UpdateJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.UpdateJobRequest, ...grpc.CallOption) (*job.UpdateJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.UpdateJobRequest, ...grpc.CallOption) *job.UpdateJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.UpdateJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.UpdateJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJob'
type MockClient_UpdateJob_Call struct {
	*mock.Call
}

// UpdateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.UpdateJobRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) UpdateJob(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_UpdateJob_Call {
	return &MockClient_UpdateJob_Call{Call: _e.mock.On("UpdateJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_UpdateJob_Call) Run(run func(ctx context.Context, in *job.UpdateJobRequest, opts ...grpc.CallOption)) *MockClient_UpdateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.UpdateJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.UpdateJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_UpdateJob_Call) Return(updateJobResponse *job.UpdateJobResponse, err error) *MockClient_UpdateJob_Call {
	_c.Call.Return(updateJobResponse, err)
	return _c
}

func (_c *MockClient_UpdateJob_Call) RunAndReturn(run func(ctx context.Context, in *job.UpdateJobRequest, opts ...grpc.CallOption) (*job.UpdateJobResponse, error)) *MockClient_UpdateJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNode provides a mock function for the type MockClient
func (_mock *MockClient) UpdateNode(ctx context.Context, in *node.UpdateNodeRequest, opts ...grpc.CallOption) (*node.UpdateNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateNode")
	}

	var r0 *node.UpdateNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.UpdateNodeRequest, ...grpc.CallOption) (*node.UpdateNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.UpdateNodeRequest, ...grpc.CallOption) *node.UpdateNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.UpdateNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.UpdateNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNode'
type MockClient_UpdateNode_Call struct {
	*mock.Call
}

// UpdateNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.UpdateNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockClient_Expecter) UpdateNode(ctx interface{}, in interface{}, opts ...interface{}) *MockClient_UpdateNode_Call {
	return &MockClient_UpdateNode_Call{Call: _e.mock.On("UpdateNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockClient_UpdateNode_Call) Run(run func(ctx context.Context, in *node.UpdateNodeRequest, opts ...grpc.CallOption)) *MockClient_UpdateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.UpdateNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.UpdateNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockClient_UpdateNode_Call) Return(updateNodeResponse *node.UpdateNodeResponse, err error) *MockClient_UpdateNode_Call {
	_c.Call.Return(updateNodeResponse, err)
	return _c
}

func (_c *MockClient_UpdateNode_Call) RunAndReturn(run func(ctx context.Context, in *node.UpdateNodeRequest, opts ...grpc.CallOption) (*node.UpdateNodeResponse, error)) *MockClient_UpdateNode_Call {
	_c.Call.Return(run)
	return _c
}
