// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/smartcontractkit/chainlink-deployments-framework/offchain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function for the type MockProvider
func (_mock *MockProvider) Initialize(ctx context.Context) (offchain.Client, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 offchain.Client
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (offchain.Client, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) offchain.Client); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(offchain.Client)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockProvider_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) Initialize(ctx interface{}) *MockProvider_Initialize_Call {
	return &MockProvider_Initialize_Call{Call: _e.mock.On("Initialize", ctx)}
}

func (_c *MockProvider_Initialize_Call) Run(run func(ctx context.Context)) *MockProvider_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProvider_Initialize_Call) Return(client offchain.Client, err error) *MockProvider_Initialize_Call {
	_c.Call.Return(client, err)
	return _c
}

func (_c *MockProvider_Initialize_Call) RunAndReturn(run func(ctx context.Context) (offchain.Client, error)) *MockProvider_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockProvider
func (_mock *MockProvider) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Name() *MockProvider_Name_Call {
	return &MockProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockProvider_Name_Call) Run(run func()) *MockProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Name_Call) Return(s string) *MockProvider_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProvider_Name_Call) RunAndReturn(run func() string) *MockProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OffchainClient provides a mock function for the type MockProvider
func (_mock *MockProvider) OffchainClient() offchain.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for OffchainClient")
	}

	var r0 offchain.Client
	if returnFunc, ok := ret.Get(0).(func() offchain.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(offchain.Client)
		}
	}
	return r0
}

// MockProvider_OffchainClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OffchainClient'
type MockProvider_OffchainClient_Call struct {
	*mock.Call
}

// OffchainClient is a helper method to define mock.On call
func (_e *MockProvider_Expecter) OffchainClient() *MockProvider_OffchainClient_Call {
	return &MockProvider_OffchainClient_Call{Call: _e.mock.On("OffchainClient")}
}

func (_c *MockProvider_OffchainClient_Call) Run(run func()) *MockProvider_OffchainClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_OffchainClient_Call) Return(client offchain.Client) *MockProvider_OffchainClient_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockProvider_OffchainClient_Call) RunAndReturn(run func() offchain.Client) *MockProvider_OffchainClient_Call {
	_c.Call.Return(run)
	return _c
}
