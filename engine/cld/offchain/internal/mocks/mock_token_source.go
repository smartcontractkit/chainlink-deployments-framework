// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/oauth2"
)

// NewMockTokenSource creates a new instance of MockTokenSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenSource {
	mock := &MockTokenSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenSource is an autogenerated mock type for the TokenSource type
type MockTokenSource struct {
	mock.Mock
}

type MockTokenSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenSource) EXPECT() *MockTokenSource_Expecter {
	return &MockTokenSource_Expecter{mock: &_m.Mock}
}

// Token provides a mock function for the type MockTokenSource
func (_mock *MockTokenSource) Token() (*oauth2.Token, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 *oauth2.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*oauth2.Token, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *oauth2.Token); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenSource_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockTokenSource_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
func (_e *MockTokenSource_Expecter) Token() *MockTokenSource_Token_Call {
	return &MockTokenSource_Token_Call{Call: _e.mock.On("Token")}
}

func (_c *MockTokenSource_Token_Call) Run(run func()) *MockTokenSource_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTokenSource_Token_Call) Return(token *oauth2.Token, err error) *MockTokenSource_Token_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockTokenSource_Token_Call) RunAndReturn(run func() (*oauth2.Token, error)) *MockTokenSource_Token_Call {
	_c.Call.Return(run)
	return _c
}
