// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCognitoClient creates a new instance of MockCognitoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCognitoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCognitoClient {
	mock := &MockCognitoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCognitoClient is an autogenerated mock type for the CognitoClient type
type MockCognitoClient struct {
	mock.Mock
}

type MockCognitoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCognitoClient) EXPECT() *MockCognitoClient_Expecter {
	return &MockCognitoClient_Expecter{mock: &_m.Mock}
}

// InitiateAuth provides a mock function for the type MockCognitoClient
func (_mock *MockCognitoClient) InitiateAuth(ctx context.Context, params *cognitoidentityprovider.InitiateAuthInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for InitiateAuth")
	}

	var r0 *cognitoidentityprovider.InitiateAuthOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.InitiateAuthOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.InitiateAuthOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.InitiateAuthOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCognitoClient_InitiateAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateAuth'
type MockCognitoClient_InitiateAuth_Call struct {
	*mock.Call
}

// InitiateAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cognitoidentityprovider.InitiateAuthInput
//   - optFns ...func(*cognitoidentityprovider.Options)
func (_e *MockCognitoClient_Expecter) InitiateAuth(ctx interface{}, params interface{}, optFns ...interface{}) *MockCognitoClient_InitiateAuth_Call {
	return &MockCognitoClient_InitiateAuth_Call{Call: _e.mock.On("InitiateAuth",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockCognitoClient_InitiateAuth_Call) Run(run func(ctx context.Context, params *cognitoidentityprovider.InitiateAuthInput, optFns ...func(*cognitoidentityprovider.Options))) *MockCognitoClient_InitiateAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *cognitoidentityprovider.InitiateAuthInput
		if args[1] != nil {
			arg1 = args[1].(*cognitoidentityprovider.InitiateAuthInput)
		}
		var arg2 []func(*cognitoidentityprovider.Options)
		var variadicArgs []func(*cognitoidentityprovider.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*cognitoidentityprovider.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCognitoClient_InitiateAuth_Call) Return(initiateAuthOutput *cognitoidentityprovider.InitiateAuthOutput, err error) *MockCognitoClient_InitiateAuth_Call {
	_c.Call.Return(initiateAuthOutput, err)
	return _c
}

func (_c *MockCognitoClient_InitiateAuth_Call) RunAndReturn(run func(ctx context.Context, params *cognitoidentityprovider.InitiateAuthInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.InitiateAuthOutput, error)) *MockCognitoClient_InitiateAuth_Call {
	_c.Call.Return(run)
	return _c
}
