// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/smartcontractkit/chainlink-protos/job-distributor/v1/csa"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockCSAServiceClient creates a new instance of MockCSAServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCSAServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCSAServiceClient {
	mock := &MockCSAServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCSAServiceClient is an autogenerated mock type for the CSAServiceClient type
type MockCSAServiceClient struct {
	mock.Mock
}

type MockCSAServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCSAServiceClient) EXPECT() *MockCSAServiceClient_Expecter {
	return &MockCSAServiceClient_Expecter{mock: &_m.Mock}
}

// GetKeypair provides a mock function for the type MockCSAServiceClient
func (_mock *MockCSAServiceClient) GetKeypair(ctx context.Context, in *csa.GetKeypairRequest, opts ...grpc.CallOption) (*csa.GetKeypairResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetKeypair")
	}

	var r0 *csa.GetKeypairResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.GetKeypairRequest, ...grpc.CallOption) (*csa.GetKeypairResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.GetKeypairRequest, ...grpc.CallOption) *csa.GetKeypairResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csa.GetKeypairResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *csa.GetKeypairRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCSAServiceClient_GetKeypair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeypair'
type MockCSAServiceClient_GetKeypair_Call struct {
	*mock.Call
}

// GetKeypair is a helper method to define mock.On call
//   - ctx context.Context
//   - in *csa.GetKeypairRequest
//   - opts ...grpc.CallOption
func (_e *MockCSAServiceClient_Expecter) GetKeypair(ctx interface{}, in interface{}, opts ...interface{}) *MockCSAServiceClient_GetKeypair_Call {
	return &MockCSAServiceClient_GetKeypair_Call{Call: _e.mock.On("GetKeypair",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCSAServiceClient_GetKeypair_Call) Run(run func(ctx context.Context, in *csa.GetKeypairRequest, opts ...grpc.CallOption)) *MockCSAServiceClient_GetKeypair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *csa.GetKeypairRequest
		if args[1] != nil {
			arg1 = args[1].(*csa.GetKeypairRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCSAServiceClient_GetKeypair_Call) Return(getKeypairResponse *csa.GetKeypairResponse, err error) *MockCSAServiceClient_GetKeypair_Call {
	_c.Call.Return(getKeypairResponse, err)
	return _c
}

func (_c *MockCSAServiceClient_GetKeypair_Call) RunAndReturn(run func(ctx context.Context, in *csa.GetKeypairRequest, opts ...grpc.CallOption) (*csa.GetKeypairResponse, error)) *MockCSAServiceClient_GetKeypair_Call {
	_c.Call.Return(run)
	return _c
}

// ListKeypairs provides a mock function for the type MockCSAServiceClient
func (_mock *MockCSAServiceClient) ListKeypairs(ctx context.Context, in *csa.ListKeypairsRequest, opts ...grpc.CallOption) (*csa.ListKeypairsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKeypairs")
	}

	var r0 *csa.ListKeypairsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.ListKeypairsRequest, ...grpc.CallOption) (*csa.ListKeypairsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *csa.ListKeypairsRequest, ...grpc.CallOption) *csa.ListKeypairsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csa.ListKeypairsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *csa.ListKeypairsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCSAServiceClient_ListKeypairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKeypairs'
type MockCSAServiceClient_ListKeypairs_Call struct {
	*mock.Call
}

// ListKeypairs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *csa.ListKeypairsRequest
//   - opts ...grpc.CallOption
func (_e *MockCSAServiceClient_Expecter) ListKeypairs(ctx interface{}, in interface{}, opts ...interface{}) *MockCSAServiceClient_ListKeypairs_Call {
	return &MockCSAServiceClient_ListKeypairs_Call{Call: _e.mock.On("ListKeypairs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCSAServiceClient_ListKeypairs_Call) Run(run func(ctx context.Context, in *csa.ListKeypairsRequest, opts ...grpc.CallOption)) *MockCSAServiceClient_ListKeypairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *csa.ListKeypairsRequest
		if args[1] != nil {
			arg1 = args[1].(*csa.ListKeypairsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCSAServiceClient_ListKeypairs_Call) Return(listKeypairsResponse *csa.ListKeypairsResponse, err error) *MockCSAServiceClient_ListKeypairs_Call {
	_c.Call.Return(listKeypairsResponse, err)
	return _c
}

func (_c *MockCSAServiceClient_ListKeypairs_Call) RunAndReturn(run func(ctx context.Context, in *csa.ListKeypairsRequest, opts ...grpc.CallOption) (*csa.ListKeypairsResponse, error)) *MockCSAServiceClient_ListKeypairs_Call {
	_c.Call.Return(run)
	return _c
}
