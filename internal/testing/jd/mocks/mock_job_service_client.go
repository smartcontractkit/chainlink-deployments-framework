// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/smartcontractkit/chainlink-protos/job-distributor/v1/job"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockJobServiceClient creates a new instance of MockJobServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobServiceClient {
	mock := &MockJobServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJobServiceClient is an autogenerated mock type for the JobServiceClient type
type MockJobServiceClient struct {
	mock.Mock
}

type MockJobServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobServiceClient) EXPECT() *MockJobServiceClient_Expecter {
	return &MockJobServiceClient_Expecter{mock: &_m.Mock}
}

// BatchProposeJob provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) BatchProposeJob(ctx context.Context, in *job.BatchProposeJobRequest, opts ...grpc.CallOption) (*job.BatchProposeJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for BatchProposeJob")
	}

	var r0 *job.BatchProposeJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.BatchProposeJobRequest, ...grpc.CallOption) (*job.BatchProposeJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.BatchProposeJobRequest, ...grpc.CallOption) *job.BatchProposeJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.BatchProposeJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.BatchProposeJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_BatchProposeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchProposeJob'
type MockJobServiceClient_BatchProposeJob_Call struct {
	*mock.Call
}

// BatchProposeJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.BatchProposeJobRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) BatchProposeJob(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_BatchProposeJob_Call {
	return &MockJobServiceClient_BatchProposeJob_Call{Call: _e.mock.On("BatchProposeJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_BatchProposeJob_Call) Run(run func(ctx context.Context, in *job.BatchProposeJobRequest, opts ...grpc.CallOption)) *MockJobServiceClient_BatchProposeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.BatchProposeJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.BatchProposeJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_BatchProposeJob_Call) Return(batchProposeJobResponse *job.BatchProposeJobResponse, err error) *MockJobServiceClient_BatchProposeJob_Call {
	_c.Call.Return(batchProposeJobResponse, err)
	return _c
}

func (_c *MockJobServiceClient_BatchProposeJob_Call) RunAndReturn(run func(ctx context.Context, in *job.BatchProposeJobRequest, opts ...grpc.CallOption) (*job.BatchProposeJobResponse, error)) *MockJobServiceClient_BatchProposeJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) DeleteJob(ctx context.Context, in *job.DeleteJobRequest, opts ...grpc.CallOption) (*job.DeleteJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 *job.DeleteJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.DeleteJobRequest, ...grpc.CallOption) (*job.DeleteJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.DeleteJobRequest, ...grpc.CallOption) *job.DeleteJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.DeleteJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.DeleteJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockJobServiceClient_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.DeleteJobRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) DeleteJob(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_DeleteJob_Call {
	return &MockJobServiceClient_DeleteJob_Call{Call: _e.mock.On("DeleteJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_DeleteJob_Call) Run(run func(ctx context.Context, in *job.DeleteJobRequest, opts ...grpc.CallOption)) *MockJobServiceClient_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.DeleteJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.DeleteJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_DeleteJob_Call) Return(deleteJobResponse *job.DeleteJobResponse, err error) *MockJobServiceClient_DeleteJob_Call {
	_c.Call.Return(deleteJobResponse, err)
	return _c
}

func (_c *MockJobServiceClient_DeleteJob_Call) RunAndReturn(run func(ctx context.Context, in *job.DeleteJobRequest, opts ...grpc.CallOption) (*job.DeleteJobResponse, error)) *MockJobServiceClient_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) GetJob(ctx context.Context, in *job.GetJobRequest, opts ...grpc.CallOption) (*job.GetJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *job.GetJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetJobRequest, ...grpc.CallOption) (*job.GetJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetJobRequest, ...grpc.CallOption) *job.GetJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.GetJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.GetJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockJobServiceClient_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.GetJobRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) GetJob(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_GetJob_Call {
	return &MockJobServiceClient_GetJob_Call{Call: _e.mock.On("GetJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_GetJob_Call) Run(run func(ctx context.Context, in *job.GetJobRequest, opts ...grpc.CallOption)) *MockJobServiceClient_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.GetJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.GetJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_GetJob_Call) Return(getJobResponse *job.GetJobResponse, err error) *MockJobServiceClient_GetJob_Call {
	_c.Call.Return(getJobResponse, err)
	return _c
}

func (_c *MockJobServiceClient_GetJob_Call) RunAndReturn(run func(ctx context.Context, in *job.GetJobRequest, opts ...grpc.CallOption) (*job.GetJobResponse, error)) *MockJobServiceClient_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetProposal provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) GetProposal(ctx context.Context, in *job.GetProposalRequest, opts ...grpc.CallOption) (*job.GetProposalResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProposal")
	}

	var r0 *job.GetProposalResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetProposalRequest, ...grpc.CallOption) (*job.GetProposalResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.GetProposalRequest, ...grpc.CallOption) *job.GetProposalResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.GetProposalResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.GetProposalRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_GetProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposal'
type MockJobServiceClient_GetProposal_Call struct {
	*mock.Call
}

// GetProposal is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.GetProposalRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) GetProposal(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_GetProposal_Call {
	return &MockJobServiceClient_GetProposal_Call{Call: _e.mock.On("GetProposal",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_GetProposal_Call) Run(run func(ctx context.Context, in *job.GetProposalRequest, opts ...grpc.CallOption)) *MockJobServiceClient_GetProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.GetProposalRequest
		if args[1] != nil {
			arg1 = args[1].(*job.GetProposalRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_GetProposal_Call) Return(getProposalResponse *job.GetProposalResponse, err error) *MockJobServiceClient_GetProposal_Call {
	_c.Call.Return(getProposalResponse, err)
	return _c
}

func (_c *MockJobServiceClient_GetProposal_Call) RunAndReturn(run func(ctx context.Context, in *job.GetProposalRequest, opts ...grpc.CallOption) (*job.GetProposalResponse, error)) *MockJobServiceClient_GetProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobs provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) ListJobs(ctx context.Context, in *job.ListJobsRequest, opts ...grpc.CallOption) (*job.ListJobsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *job.ListJobsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListJobsRequest, ...grpc.CallOption) (*job.ListJobsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListJobsRequest, ...grpc.CallOption) *job.ListJobsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.ListJobsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.ListJobsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_ListJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobs'
type MockJobServiceClient_ListJobs_Call struct {
	*mock.Call
}

// ListJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.ListJobsRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) ListJobs(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_ListJobs_Call {
	return &MockJobServiceClient_ListJobs_Call{Call: _e.mock.On("ListJobs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_ListJobs_Call) Run(run func(ctx context.Context, in *job.ListJobsRequest, opts ...grpc.CallOption)) *MockJobServiceClient_ListJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.ListJobsRequest
		if args[1] != nil {
			arg1 = args[1].(*job.ListJobsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_ListJobs_Call) Return(listJobsResponse *job.ListJobsResponse, err error) *MockJobServiceClient_ListJobs_Call {
	_c.Call.Return(listJobsResponse, err)
	return _c
}

func (_c *MockJobServiceClient_ListJobs_Call) RunAndReturn(run func(ctx context.Context, in *job.ListJobsRequest, opts ...grpc.CallOption) (*job.ListJobsResponse, error)) *MockJobServiceClient_ListJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListProposals provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) ListProposals(ctx context.Context, in *job.ListProposalsRequest, opts ...grpc.CallOption) (*job.ListProposalsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListProposals")
	}

	var r0 *job.ListProposalsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListProposalsRequest, ...grpc.CallOption) (*job.ListProposalsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ListProposalsRequest, ...grpc.CallOption) *job.ListProposalsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.ListProposalsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.ListProposalsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_ListProposals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProposals'
type MockJobServiceClient_ListProposals_Call struct {
	*mock.Call
}

// ListProposals is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.ListProposalsRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) ListProposals(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_ListProposals_Call {
	return &MockJobServiceClient_ListProposals_Call{Call: _e.mock.On("ListProposals",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_ListProposals_Call) Run(run func(ctx context.Context, in *job.ListProposalsRequest, opts ...grpc.CallOption)) *MockJobServiceClient_ListProposals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.ListProposalsRequest
		if args[1] != nil {
			arg1 = args[1].(*job.ListProposalsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_ListProposals_Call) Return(listProposalsResponse *job.ListProposalsResponse, err error) *MockJobServiceClient_ListProposals_Call {
	_c.Call.Return(listProposalsResponse, err)
	return _c
}

func (_c *MockJobServiceClient_ListProposals_Call) RunAndReturn(run func(ctx context.Context, in *job.ListProposalsRequest, opts ...grpc.CallOption) (*job.ListProposalsResponse, error)) *MockJobServiceClient_ListProposals_Call {
	_c.Call.Return(run)
	return _c
}

// ProposeJob provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) ProposeJob(ctx context.Context, in *job.ProposeJobRequest, opts ...grpc.CallOption) (*job.ProposeJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ProposeJob")
	}

	var r0 *job.ProposeJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ProposeJobRequest, ...grpc.CallOption) (*job.ProposeJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.ProposeJobRequest, ...grpc.CallOption) *job.ProposeJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.ProposeJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.ProposeJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_ProposeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProposeJob'
type MockJobServiceClient_ProposeJob_Call struct {
	*mock.Call
}

// ProposeJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.ProposeJobRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) ProposeJob(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_ProposeJob_Call {
	return &MockJobServiceClient_ProposeJob_Call{Call: _e.mock.On("ProposeJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_ProposeJob_Call) Run(run func(ctx context.Context, in *job.ProposeJobRequest, opts ...grpc.CallOption)) *MockJobServiceClient_ProposeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.ProposeJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.ProposeJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_ProposeJob_Call) Return(proposeJobResponse *job.ProposeJobResponse, err error) *MockJobServiceClient_ProposeJob_Call {
	_c.Call.Return(proposeJobResponse, err)
	return _c
}

func (_c *MockJobServiceClient_ProposeJob_Call) RunAndReturn(run func(ctx context.Context, in *job.ProposeJobRequest, opts ...grpc.CallOption) (*job.ProposeJobResponse, error)) *MockJobServiceClient_ProposeJob_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeJob provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) RevokeJob(ctx context.Context, in *job.RevokeJobRequest, opts ...grpc.CallOption) (*job.RevokeJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RevokeJob")
	}

	var r0 *job.RevokeJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.RevokeJobRequest, ...grpc.CallOption) (*job.RevokeJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.RevokeJobRequest, ...grpc.CallOption) *job.RevokeJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.RevokeJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.RevokeJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_RevokeJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeJob'
type MockJobServiceClient_RevokeJob_Call struct {
	*mock.Call
}

// RevokeJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.RevokeJobRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) RevokeJob(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_RevokeJob_Call {
	return &MockJobServiceClient_RevokeJob_Call{Call: _e.mock.On("RevokeJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_RevokeJob_Call) Run(run func(ctx context.Context, in *job.RevokeJobRequest, opts ...grpc.CallOption)) *MockJobServiceClient_RevokeJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.RevokeJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.RevokeJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_RevokeJob_Call) Return(revokeJobResponse *job.RevokeJobResponse, err error) *MockJobServiceClient_RevokeJob_Call {
	_c.Call.Return(revokeJobResponse, err)
	return _c
}

func (_c *MockJobServiceClient_RevokeJob_Call) RunAndReturn(run func(ctx context.Context, in *job.RevokeJobRequest, opts ...grpc.CallOption) (*job.RevokeJobResponse, error)) *MockJobServiceClient_RevokeJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJob provides a mock function for the type MockJobServiceClient
func (_mock *MockJobServiceClient) UpdateJob(ctx context.Context, in *job.UpdateJobRequest, opts ...grpc.CallOption) (*job.UpdateJobResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *job.UpdateJobResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.UpdateJobRequest, ...grpc.CallOption) (*job.UpdateJobResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *job.UpdateJobRequest, ...grpc.CallOption) *job.UpdateJobResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.UpdateJobResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *job.UpdateJobRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobServiceClient_UpdateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJob'
type MockJobServiceClient_UpdateJob_Call struct {
	*mock.Call
}

// UpdateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *job.UpdateJobRequest
//   - opts ...grpc.CallOption
func (_e *MockJobServiceClient_Expecter) UpdateJob(ctx interface{}, in interface{}, opts ...interface{}) *MockJobServiceClient_UpdateJob_Call {
	return &MockJobServiceClient_UpdateJob_Call{Call: _e.mock.On("UpdateJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockJobServiceClient_UpdateJob_Call) Run(run func(ctx context.Context, in *job.UpdateJobRequest, opts ...grpc.CallOption)) *MockJobServiceClient_UpdateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *job.UpdateJobRequest
		if args[1] != nil {
			arg1 = args[1].(*job.UpdateJobRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockJobServiceClient_UpdateJob_Call) Return(updateJobResponse *job.UpdateJobResponse, err error) *MockJobServiceClient_UpdateJob_Call {
	_c.Call.Return(updateJobResponse, err)
	return _c
}

func (_c *MockJobServiceClient_UpdateJob_Call) RunAndReturn(run func(ctx context.Context, in *job.UpdateJobRequest, opts ...grpc.CallOption) (*job.UpdateJobResponse, error)) *MockJobServiceClient_UpdateJob_Call {
	_c.Call.Return(run)
	return _c
}
