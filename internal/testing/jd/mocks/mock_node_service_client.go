// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/smartcontractkit/chainlink-protos/job-distributor/v1/node"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockNodeServiceClient creates a new instance of MockNodeServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeServiceClient {
	mock := &MockNodeServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNodeServiceClient is an autogenerated mock type for the NodeServiceClient type
type MockNodeServiceClient struct {
	mock.Mock
}

type MockNodeServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeServiceClient) EXPECT() *MockNodeServiceClient_Expecter {
	return &MockNodeServiceClient_Expecter{mock: &_m.Mock}
}

// DisableNode provides a mock function for the type MockNodeServiceClient
func (_mock *MockNodeServiceClient) DisableNode(ctx context.Context, in *node.DisableNodeRequest, opts ...grpc.CallOption) (*node.DisableNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DisableNode")
	}

	var r0 *node.DisableNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.DisableNodeRequest, ...grpc.CallOption) (*node.DisableNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.DisableNodeRequest, ...grpc.CallOption) *node.DisableNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.DisableNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.DisableNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNodeServiceClient_DisableNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableNode'
type MockNodeServiceClient_DisableNode_Call struct {
	*mock.Call
}

// DisableNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.DisableNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockNodeServiceClient_Expecter) DisableNode(ctx interface{}, in interface{}, opts ...interface{}) *MockNodeServiceClient_DisableNode_Call {
	return &MockNodeServiceClient_DisableNode_Call{Call: _e.mock.On("DisableNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNodeServiceClient_DisableNode_Call) Run(run func(ctx context.Context, in *node.DisableNodeRequest, opts ...grpc.CallOption)) *MockNodeServiceClient_DisableNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.DisableNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.DisableNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockNodeServiceClient_DisableNode_Call) Return(disableNodeResponse *node.DisableNodeResponse, err error) *MockNodeServiceClient_DisableNode_Call {
	_c.Call.Return(disableNodeResponse, err)
	return _c
}

func (_c *MockNodeServiceClient_DisableNode_Call) RunAndReturn(run func(ctx context.Context, in *node.DisableNodeRequest, opts ...grpc.CallOption) (*node.DisableNodeResponse, error)) *MockNodeServiceClient_DisableNode_Call {
	_c.Call.Return(run)
	return _c
}

// EnableNode provides a mock function for the type MockNodeServiceClient
func (_mock *MockNodeServiceClient) EnableNode(ctx context.Context, in *node.EnableNodeRequest, opts ...grpc.CallOption) (*node.EnableNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EnableNode")
	}

	var r0 *node.EnableNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.EnableNodeRequest, ...grpc.CallOption) (*node.EnableNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.EnableNodeRequest, ...grpc.CallOption) *node.EnableNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.EnableNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.EnableNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNodeServiceClient_EnableNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableNode'
type MockNodeServiceClient_EnableNode_Call struct {
	*mock.Call
}

// EnableNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.EnableNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockNodeServiceClient_Expecter) EnableNode(ctx interface{}, in interface{}, opts ...interface{}) *MockNodeServiceClient_EnableNode_Call {
	return &MockNodeServiceClient_EnableNode_Call{Call: _e.mock.On("EnableNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNodeServiceClient_EnableNode_Call) Run(run func(ctx context.Context, in *node.EnableNodeRequest, opts ...grpc.CallOption)) *MockNodeServiceClient_EnableNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.EnableNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.EnableNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockNodeServiceClient_EnableNode_Call) Return(enableNodeResponse *node.EnableNodeResponse, err error) *MockNodeServiceClient_EnableNode_Call {
	_c.Call.Return(enableNodeResponse, err)
	return _c
}

func (_c *MockNodeServiceClient_EnableNode_Call) RunAndReturn(run func(ctx context.Context, in *node.EnableNodeRequest, opts ...grpc.CallOption) (*node.EnableNodeResponse, error)) *MockNodeServiceClient_EnableNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function for the type MockNodeServiceClient
func (_mock *MockNodeServiceClient) GetNode(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 *node.GetNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.GetNodeRequest, ...grpc.CallOption) (*node.GetNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.GetNodeRequest, ...grpc.CallOption) *node.GetNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.GetNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.GetNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNodeServiceClient_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type MockNodeServiceClient_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.GetNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockNodeServiceClient_Expecter) GetNode(ctx interface{}, in interface{}, opts ...interface{}) *MockNodeServiceClient_GetNode_Call {
	return &MockNodeServiceClient_GetNode_Call{Call: _e.mock.On("GetNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNodeServiceClient_GetNode_Call) Run(run func(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption)) *MockNodeServiceClient_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.GetNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.GetNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockNodeServiceClient_GetNode_Call) Return(getNodeResponse *node.GetNodeResponse, err error) *MockNodeServiceClient_GetNode_Call {
	_c.Call.Return(getNodeResponse, err)
	return _c
}

func (_c *MockNodeServiceClient_GetNode_Call) RunAndReturn(run func(ctx context.Context, in *node.GetNodeRequest, opts ...grpc.CallOption) (*node.GetNodeResponse, error)) *MockNodeServiceClient_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodeChainConfigs provides a mock function for the type MockNodeServiceClient
func (_mock *MockNodeServiceClient) ListNodeChainConfigs(ctx context.Context, in *node.ListNodeChainConfigsRequest, opts ...grpc.CallOption) (*node.ListNodeChainConfigsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListNodeChainConfigs")
	}

	var r0 *node.ListNodeChainConfigsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodeChainConfigsRequest, ...grpc.CallOption) (*node.ListNodeChainConfigsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodeChainConfigsRequest, ...grpc.CallOption) *node.ListNodeChainConfigsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.ListNodeChainConfigsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.ListNodeChainConfigsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNodeServiceClient_ListNodeChainConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodeChainConfigs'
type MockNodeServiceClient_ListNodeChainConfigs_Call struct {
	*mock.Call
}

// ListNodeChainConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.ListNodeChainConfigsRequest
//   - opts ...grpc.CallOption
func (_e *MockNodeServiceClient_Expecter) ListNodeChainConfigs(ctx interface{}, in interface{}, opts ...interface{}) *MockNodeServiceClient_ListNodeChainConfigs_Call {
	return &MockNodeServiceClient_ListNodeChainConfigs_Call{Call: _e.mock.On("ListNodeChainConfigs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNodeServiceClient_ListNodeChainConfigs_Call) Run(run func(ctx context.Context, in *node.ListNodeChainConfigsRequest, opts ...grpc.CallOption)) *MockNodeServiceClient_ListNodeChainConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.ListNodeChainConfigsRequest
		if args[1] != nil {
			arg1 = args[1].(*node.ListNodeChainConfigsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockNodeServiceClient_ListNodeChainConfigs_Call) Return(listNodeChainConfigsResponse *node.ListNodeChainConfigsResponse, err error) *MockNodeServiceClient_ListNodeChainConfigs_Call {
	_c.Call.Return(listNodeChainConfigsResponse, err)
	return _c
}

func (_c *MockNodeServiceClient_ListNodeChainConfigs_Call) RunAndReturn(run func(ctx context.Context, in *node.ListNodeChainConfigsRequest, opts ...grpc.CallOption) (*node.ListNodeChainConfigsResponse, error)) *MockNodeServiceClient_ListNodeChainConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function for the type MockNodeServiceClient
func (_mock *MockNodeServiceClient) ListNodes(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 *node.ListNodesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodesRequest, ...grpc.CallOption) (*node.ListNodesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.ListNodesRequest, ...grpc.CallOption) *node.ListNodesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.ListNodesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.ListNodesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNodeServiceClient_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockNodeServiceClient_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.ListNodesRequest
//   - opts ...grpc.CallOption
func (_e *MockNodeServiceClient_Expecter) ListNodes(ctx interface{}, in interface{}, opts ...interface{}) *MockNodeServiceClient_ListNodes_Call {
	return &MockNodeServiceClient_ListNodes_Call{Call: _e.mock.On("ListNodes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNodeServiceClient_ListNodes_Call) Run(run func(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption)) *MockNodeServiceClient_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.ListNodesRequest
		if args[1] != nil {
			arg1 = args[1].(*node.ListNodesRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockNodeServiceClient_ListNodes_Call) Return(listNodesResponse *node.ListNodesResponse, err error) *MockNodeServiceClient_ListNodes_Call {
	_c.Call.Return(listNodesResponse, err)
	return _c
}

func (_c *MockNodeServiceClient_ListNodes_Call) RunAndReturn(run func(ctx context.Context, in *node.ListNodesRequest, opts ...grpc.CallOption) (*node.ListNodesResponse, error)) *MockNodeServiceClient_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNode provides a mock function for the type MockNodeServiceClient
func (_mock *MockNodeServiceClient) RegisterNode(ctx context.Context, in *node.RegisterNodeRequest, opts ...grpc.CallOption) (*node.RegisterNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RegisterNode")
	}

	var r0 *node.RegisterNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.RegisterNodeRequest, ...grpc.CallOption) (*node.RegisterNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.RegisterNodeRequest, ...grpc.CallOption) *node.RegisterNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.RegisterNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.RegisterNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNodeServiceClient_RegisterNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNode'
type MockNodeServiceClient_RegisterNode_Call struct {
	*mock.Call
}

// RegisterNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.RegisterNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockNodeServiceClient_Expecter) RegisterNode(ctx interface{}, in interface{}, opts ...interface{}) *MockNodeServiceClient_RegisterNode_Call {
	return &MockNodeServiceClient_RegisterNode_Call{Call: _e.mock.On("RegisterNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNodeServiceClient_RegisterNode_Call) Run(run func(ctx context.Context, in *node.RegisterNodeRequest, opts ...grpc.CallOption)) *MockNodeServiceClient_RegisterNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.RegisterNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.RegisterNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockNodeServiceClient_RegisterNode_Call) Return(registerNodeResponse *node.RegisterNodeResponse, err error) *MockNodeServiceClient_RegisterNode_Call {
	_c.Call.Return(registerNodeResponse, err)
	return _c
}

func (_c *MockNodeServiceClient_RegisterNode_Call) RunAndReturn(run func(ctx context.Context, in *node.RegisterNodeRequest, opts ...grpc.CallOption) (*node.RegisterNodeResponse, error)) *MockNodeServiceClient_RegisterNode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNode provides a mock function for the type MockNodeServiceClient
func (_mock *MockNodeServiceClient) UpdateNode(ctx context.Context, in *node.UpdateNodeRequest, opts ...grpc.CallOption) (*node.UpdateNodeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateNode")
	}

	var r0 *node.UpdateNodeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.UpdateNodeRequest, ...grpc.CallOption) (*node.UpdateNodeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *node.UpdateNodeRequest, ...grpc.CallOption) *node.UpdateNodeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.UpdateNodeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *node.UpdateNodeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNodeServiceClient_UpdateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNode'
type MockNodeServiceClient_UpdateNode_Call struct {
	*mock.Call
}

// UpdateNode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.UpdateNodeRequest
//   - opts ...grpc.CallOption
func (_e *MockNodeServiceClient_Expecter) UpdateNode(ctx interface{}, in interface{}, opts ...interface{}) *MockNodeServiceClient_UpdateNode_Call {
	return &MockNodeServiceClient_UpdateNode_Call{Call: _e.mock.On("UpdateNode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockNodeServiceClient_UpdateNode_Call) Run(run func(ctx context.Context, in *node.UpdateNodeRequest, opts ...grpc.CallOption)) *MockNodeServiceClient_UpdateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *node.UpdateNodeRequest
		if args[1] != nil {
			arg1 = args[1].(*node.UpdateNodeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockNodeServiceClient_UpdateNode_Call) Return(updateNodeResponse *node.UpdateNodeResponse, err error) *MockNodeServiceClient_UpdateNode_Call {
	_c.Call.Return(updateNodeResponse, err)
	return _c
}

func (_c *MockNodeServiceClient_UpdateNode_Call) RunAndReturn(run func(ctx context.Context, in *node.UpdateNodeRequest, opts ...grpc.CallOption) (*node.UpdateNodeResponse, error)) *MockNodeServiceClient_UpdateNode_Call {
	_c.Call.Return(run)
	return _c
}
