// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datastore

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCatalogStore creates a new instance of MockCatalogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCatalogStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCatalogStore {
	mock := &MockCatalogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCatalogStore is an autogenerated mock type for the CatalogStore type
type MockCatalogStore struct {
	mock.Mock
}

type MockCatalogStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCatalogStore) EXPECT() *MockCatalogStore_Expecter {
	return &MockCatalogStore_Expecter{mock: &_m.Mock}
}

// Addresses provides a mock function for the type MockCatalogStore
func (_mock *MockCatalogStore) Addresses() MutableRefStoreV2[AddressRefKey, AddressRef] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Addresses")
	}

	var r0 MutableRefStoreV2[AddressRefKey, AddressRef]
	if returnFunc, ok := ret.Get(0).(func() MutableRefStoreV2[AddressRefKey, AddressRef]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MutableRefStoreV2[AddressRefKey, AddressRef])
		}
	}
	return r0
}

// MockCatalogStore_Addresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addresses'
type MockCatalogStore_Addresses_Call struct {
	*mock.Call
}

// Addresses is a helper method to define mock.On call
func (_e *MockCatalogStore_Expecter) Addresses() *MockCatalogStore_Addresses_Call {
	return &MockCatalogStore_Addresses_Call{Call: _e.mock.On("Addresses")}
}

func (_c *MockCatalogStore_Addresses_Call) Run(run func()) *MockCatalogStore_Addresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCatalogStore_Addresses_Call) Return(mutableRefStoreV2 MutableRefStoreV2[AddressRefKey, AddressRef]) *MockCatalogStore_Addresses_Call {
	_c.Call.Return(mutableRefStoreV2)
	return _c
}

func (_c *MockCatalogStore_Addresses_Call) RunAndReturn(run func() MutableRefStoreV2[AddressRefKey, AddressRef]) *MockCatalogStore_Addresses_Call {
	_c.Call.Return(run)
	return _c
}

// ChainMetadata provides a mock function for the type MockCatalogStore
func (_mock *MockCatalogStore) ChainMetadata() MutableStoreV2[ChainMetadataKey, ChainMetadata] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainMetadata")
	}

	var r0 MutableStoreV2[ChainMetadataKey, ChainMetadata]
	if returnFunc, ok := ret.Get(0).(func() MutableStoreV2[ChainMetadataKey, ChainMetadata]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MutableStoreV2[ChainMetadataKey, ChainMetadata])
		}
	}
	return r0
}

// MockCatalogStore_ChainMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainMetadata'
type MockCatalogStore_ChainMetadata_Call struct {
	*mock.Call
}

// ChainMetadata is a helper method to define mock.On call
func (_e *MockCatalogStore_Expecter) ChainMetadata() *MockCatalogStore_ChainMetadata_Call {
	return &MockCatalogStore_ChainMetadata_Call{Call: _e.mock.On("ChainMetadata")}
}

func (_c *MockCatalogStore_ChainMetadata_Call) Run(run func()) *MockCatalogStore_ChainMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCatalogStore_ChainMetadata_Call) Return(mutableStoreV2 MutableStoreV2[ChainMetadataKey, ChainMetadata]) *MockCatalogStore_ChainMetadata_Call {
	_c.Call.Return(mutableStoreV2)
	return _c
}

func (_c *MockCatalogStore_ChainMetadata_Call) RunAndReturn(run func() MutableStoreV2[ChainMetadataKey, ChainMetadata]) *MockCatalogStore_ChainMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ContractMetadata provides a mock function for the type MockCatalogStore
func (_mock *MockCatalogStore) ContractMetadata() MutableStoreV2[ContractMetadataKey, ContractMetadata] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContractMetadata")
	}

	var r0 MutableStoreV2[ContractMetadataKey, ContractMetadata]
	if returnFunc, ok := ret.Get(0).(func() MutableStoreV2[ContractMetadataKey, ContractMetadata]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MutableStoreV2[ContractMetadataKey, ContractMetadata])
		}
	}
	return r0
}

// MockCatalogStore_ContractMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContractMetadata'
type MockCatalogStore_ContractMetadata_Call struct {
	*mock.Call
}

// ContractMetadata is a helper method to define mock.On call
func (_e *MockCatalogStore_Expecter) ContractMetadata() *MockCatalogStore_ContractMetadata_Call {
	return &MockCatalogStore_ContractMetadata_Call{Call: _e.mock.On("ContractMetadata")}
}

func (_c *MockCatalogStore_ContractMetadata_Call) Run(run func()) *MockCatalogStore_ContractMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCatalogStore_ContractMetadata_Call) Return(mutableStoreV2 MutableStoreV2[ContractMetadataKey, ContractMetadata]) *MockCatalogStore_ContractMetadata_Call {
	_c.Call.Return(mutableStoreV2)
	return _c
}

func (_c *MockCatalogStore_ContractMetadata_Call) RunAndReturn(run func() MutableStoreV2[ContractMetadataKey, ContractMetadata]) *MockCatalogStore_ContractMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// EnvMetadata provides a mock function for the type MockCatalogStore
func (_mock *MockCatalogStore) EnvMetadata() MutableUnaryStoreV2[EnvMetadata] {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvMetadata")
	}

	var r0 MutableUnaryStoreV2[EnvMetadata]
	if returnFunc, ok := ret.Get(0).(func() MutableUnaryStoreV2[EnvMetadata]); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MutableUnaryStoreV2[EnvMetadata])
		}
	}
	return r0
}

// MockCatalogStore_EnvMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvMetadata'
type MockCatalogStore_EnvMetadata_Call struct {
	*mock.Call
}

// EnvMetadata is a helper method to define mock.On call
func (_e *MockCatalogStore_Expecter) EnvMetadata() *MockCatalogStore_EnvMetadata_Call {
	return &MockCatalogStore_EnvMetadata_Call{Call: _e.mock.On("EnvMetadata")}
}

func (_c *MockCatalogStore_EnvMetadata_Call) Run(run func()) *MockCatalogStore_EnvMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCatalogStore_EnvMetadata_Call) Return(mutableUnaryStoreV2 MutableUnaryStoreV2[EnvMetadata]) *MockCatalogStore_EnvMetadata_Call {
	_c.Call.Return(mutableUnaryStoreV2)
	return _c
}

func (_c *MockCatalogStore_EnvMetadata_Call) RunAndReturn(run func() MutableUnaryStoreV2[EnvMetadata]) *MockCatalogStore_EnvMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function for the type MockCatalogStore
func (_mock *MockCatalogStore) WithTransaction(ctx context.Context, fn TransactionLogic) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, TransactionLogic) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCatalogStore_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type MockCatalogStore_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn TransactionLogic
func (_e *MockCatalogStore_Expecter) WithTransaction(ctx interface{}, fn interface{}) *MockCatalogStore_WithTransaction_Call {
	return &MockCatalogStore_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx, fn)}
}

func (_c *MockCatalogStore_WithTransaction_Call) Run(run func(ctx context.Context, fn TransactionLogic)) *MockCatalogStore_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 TransactionLogic
		if args[1] != nil {
			arg1 = args[1].(TransactionLogic)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCatalogStore_WithTransaction_Call) Return(err error) *MockCatalogStore_WithTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCatalogStore_WithTransaction_Call) RunAndReturn(run func(ctx context.Context, fn TransactionLogic) error) *MockCatalogStore_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}
