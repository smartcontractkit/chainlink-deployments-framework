// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datastore

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockDataStore creates a new instance of MockDataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataStore {
	mock := &MockDataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDataStore is an autogenerated mock type for the DataStore type
type MockDataStore struct {
	mock.Mock
}

type MockDataStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataStore) EXPECT() *MockDataStore_Expecter {
	return &MockDataStore_Expecter{mock: &_m.Mock}
}

// Addresses provides a mock function for the type MockDataStore
func (_mock *MockDataStore) Addresses() AddressRefStore {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Addresses")
	}

	var r0 AddressRefStore
	if returnFunc, ok := ret.Get(0).(func() AddressRefStore); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(AddressRefStore)
		}
	}
	return r0
}

// MockDataStore_Addresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addresses'
type MockDataStore_Addresses_Call struct {
	*mock.Call
}

// Addresses is a helper method to define mock.On call
func (_e *MockDataStore_Expecter) Addresses() *MockDataStore_Addresses_Call {
	return &MockDataStore_Addresses_Call{Call: _e.mock.On("Addresses")}
}

func (_c *MockDataStore_Addresses_Call) Run(run func()) *MockDataStore_Addresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataStore_Addresses_Call) Return(addressRefStore AddressRefStore) *MockDataStore_Addresses_Call {
	_c.Call.Return(addressRefStore)
	return _c
}

func (_c *MockDataStore_Addresses_Call) RunAndReturn(run func() AddressRefStore) *MockDataStore_Addresses_Call {
	_c.Call.Return(run)
	return _c
}

// ChainMetadata provides a mock function for the type MockDataStore
func (_mock *MockDataStore) ChainMetadata() ChainMetadataStore {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainMetadata")
	}

	var r0 ChainMetadataStore
	if returnFunc, ok := ret.Get(0).(func() ChainMetadataStore); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ChainMetadataStore)
		}
	}
	return r0
}

// MockDataStore_ChainMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainMetadata'
type MockDataStore_ChainMetadata_Call struct {
	*mock.Call
}

// ChainMetadata is a helper method to define mock.On call
func (_e *MockDataStore_Expecter) ChainMetadata() *MockDataStore_ChainMetadata_Call {
	return &MockDataStore_ChainMetadata_Call{Call: _e.mock.On("ChainMetadata")}
}

func (_c *MockDataStore_ChainMetadata_Call) Run(run func()) *MockDataStore_ChainMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataStore_ChainMetadata_Call) Return(chainMetadataStore ChainMetadataStore) *MockDataStore_ChainMetadata_Call {
	_c.Call.Return(chainMetadataStore)
	return _c
}

func (_c *MockDataStore_ChainMetadata_Call) RunAndReturn(run func() ChainMetadataStore) *MockDataStore_ChainMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// ContractMetadata provides a mock function for the type MockDataStore
func (_mock *MockDataStore) ContractMetadata() ContractMetadataStore {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContractMetadata")
	}

	var r0 ContractMetadataStore
	if returnFunc, ok := ret.Get(0).(func() ContractMetadataStore); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ContractMetadataStore)
		}
	}
	return r0
}

// MockDataStore_ContractMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContractMetadata'
type MockDataStore_ContractMetadata_Call struct {
	*mock.Call
}

// ContractMetadata is a helper method to define mock.On call
func (_e *MockDataStore_Expecter) ContractMetadata() *MockDataStore_ContractMetadata_Call {
	return &MockDataStore_ContractMetadata_Call{Call: _e.mock.On("ContractMetadata")}
}

func (_c *MockDataStore_ContractMetadata_Call) Run(run func()) *MockDataStore_ContractMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataStore_ContractMetadata_Call) Return(contractMetadataStore ContractMetadataStore) *MockDataStore_ContractMetadata_Call {
	_c.Call.Return(contractMetadataStore)
	return _c
}

func (_c *MockDataStore_ContractMetadata_Call) RunAndReturn(run func() ContractMetadataStore) *MockDataStore_ContractMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// EnvMetadata provides a mock function for the type MockDataStore
func (_mock *MockDataStore) EnvMetadata() EnvMetadataStore {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvMetadata")
	}

	var r0 EnvMetadataStore
	if returnFunc, ok := ret.Get(0).(func() EnvMetadataStore); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EnvMetadataStore)
		}
	}
	return r0
}

// MockDataStore_EnvMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvMetadata'
type MockDataStore_EnvMetadata_Call struct {
	*mock.Call
}

// EnvMetadata is a helper method to define mock.On call
func (_e *MockDataStore_Expecter) EnvMetadata() *MockDataStore_EnvMetadata_Call {
	return &MockDataStore_EnvMetadata_Call{Call: _e.mock.On("EnvMetadata")}
}

func (_c *MockDataStore_EnvMetadata_Call) Run(run func()) *MockDataStore_EnvMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataStore_EnvMetadata_Call) Return(envMetadataStore EnvMetadataStore) *MockDataStore_EnvMetadata_Call {
	_c.Call.Return(envMetadataStore)
	return _c
}

func (_c *MockDataStore_EnvMetadata_Call) RunAndReturn(run func() EnvMetadataStore) *MockDataStore_EnvMetadata_Call {
	_c.Call.Return(run)
	return _c
}

