// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datastore

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMutableUnaryStoreV2 creates a new instance of MockMutableUnaryStoreV2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMutableUnaryStoreV2[R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMutableUnaryStoreV2[R] {
	mock := &MockMutableUnaryStoreV2[R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMutableUnaryStoreV2 is an autogenerated mock type for the MutableUnaryStoreV2 type
type MockMutableUnaryStoreV2[R any] struct {
	mock.Mock
}

type MockMutableUnaryStoreV2_Expecter[R any] struct {
	mock *mock.Mock
}

func (_m *MockMutableUnaryStoreV2[R]) EXPECT() *MockMutableUnaryStoreV2_Expecter[R] {
	return &MockMutableUnaryStoreV2_Expecter[R]{mock: &_m.Mock}
}

// Get provides a mock function for the type MockMutableUnaryStoreV2
func (_mock *MockMutableUnaryStoreV2[R]) Get(ctx context.Context, options ...GetOption) (R, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(ctx, options)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 R
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...GetOption) (R, error)); ok {
		return returnFunc(ctx, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...GetOption) R); ok {
		r0 = returnFunc(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(R)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...GetOption) error); ok {
		r1 = returnFunc(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMutableUnaryStoreV2_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMutableUnaryStoreV2_Get_Call[R any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - options ...GetOption
func (_e *MockMutableUnaryStoreV2_Expecter[R]) Get(ctx interface{}, options ...interface{}) *MockMutableUnaryStoreV2_Get_Call[R] {
	return &MockMutableUnaryStoreV2_Get_Call[R]{Call: _e.mock.On("Get",
		append([]interface{}{ctx}, options...)...)}
}

func (_c *MockMutableUnaryStoreV2_Get_Call[R]) Run(run func(ctx context.Context, options ...GetOption)) *MockMutableUnaryStoreV2_Get_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []GetOption
		var variadicArgs []GetOption
		if len(args) > 1 {
			variadicArgs = args[1].([]GetOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockMutableUnaryStoreV2_Get_Call[R]) Return(v R, err error) *MockMutableUnaryStoreV2_Get_Call[R] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockMutableUnaryStoreV2_Get_Call[R]) RunAndReturn(run func(ctx context.Context, options ...GetOption) (R, error)) *MockMutableUnaryStoreV2_Get_Call[R] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockMutableUnaryStoreV2
func (_mock *MockMutableUnaryStoreV2[R]) Set(ctx context.Context, metadata any, opts ...UpdateOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, metadata, opts)
	} else {
		tmpRet = _mock.Called(ctx, metadata)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...UpdateOption) error); ok {
		r0 = returnFunc(ctx, metadata, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMutableUnaryStoreV2_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockMutableUnaryStoreV2_Set_Call[R any] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - metadata any
//   - opts ...UpdateOption
func (_e *MockMutableUnaryStoreV2_Expecter[R]) Set(ctx interface{}, metadata interface{}, opts ...interface{}) *MockMutableUnaryStoreV2_Set_Call[R] {
	return &MockMutableUnaryStoreV2_Set_Call[R]{Call: _e.mock.On("Set",
		append([]interface{}{ctx, metadata}, opts...)...)}
}

func (_c *MockMutableUnaryStoreV2_Set_Call[R]) Run(run func(ctx context.Context, metadata any, opts ...UpdateOption)) *MockMutableUnaryStoreV2_Set_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 []UpdateOption
		var variadicArgs []UpdateOption
		if len(args) > 2 {
			variadicArgs = args[2].([]UpdateOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMutableUnaryStoreV2_Set_Call[R]) Return(err error) *MockMutableUnaryStoreV2_Set_Call[R] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMutableUnaryStoreV2_Set_Call[R]) RunAndReturn(run func(ctx context.Context, metadata any, opts ...UpdateOption) error) *MockMutableUnaryStoreV2_Set_Call[R] {
	_c.Call.Return(run)
	return _c
}
