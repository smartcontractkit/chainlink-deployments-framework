// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datastore

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAddressRefStore creates a new instance of MockAddressRefStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddressRefStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddressRefStore {
	mock := &MockAddressRefStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAddressRefStore is an autogenerated mock type for the AddressRefStore type
type MockAddressRefStore struct {
	mock.Mock
}

type MockAddressRefStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressRefStore) EXPECT() *MockAddressRefStore_Expecter {
	return &MockAddressRefStore_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type MockAddressRefStore
func (_mock *MockAddressRefStore) Fetch() ([]AddressRef, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []AddressRef
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]AddressRef, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []AddressRef); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AddressRef)
		}
	}

	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAddressRefStore_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockAddressRefStore_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
func (_e *MockAddressRefStore_Expecter) Fetch() *MockAddressRefStore_Fetch_Call {
	return &MockAddressRefStore_Fetch_Call{Call: _e.mock.On("Fetch")}
}

func (_c *MockAddressRefStore_Fetch_Call) Run(run func()) *MockAddressRefStore_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddressRefStore_Fetch_Call) Return(refs []AddressRef, err error) *MockAddressRefStore_Fetch_Call {
	_c.Call.Return(refs, err)
	return _c
}

func (_c *MockAddressRefStore_Fetch_Call) RunAndReturn(run func() ([]AddressRef, error)) *MockAddressRefStore_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockAddressRefStore
func (_mock *MockAddressRefStore) Get(key AddressRefKey) (AddressRef, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 AddressRef
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(AddressRefKey) (AddressRef, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(AddressRefKey) AddressRef); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(AddressRef)
	}

	if returnFunc, ok := ret.Get(1).(func(AddressRefKey) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAddressRefStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAddressRefStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key AddressRefKey
func (_e *MockAddressRefStore_Expecter) Get(key interface{}) *MockAddressRefStore_Get_Call {
	return &MockAddressRefStore_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockAddressRefStore_Get_Call) Run(run func(key AddressRefKey)) *MockAddressRefStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(AddressRefKey))
	})
	return _c
}

func (_c *MockAddressRefStore_Get_Call) Return(ref AddressRef, err error) *MockAddressRefStore_Get_Call {
	_c.Call.Return(ref, err)
	return _c
}

func (_c *MockAddressRefStore_Get_Call) RunAndReturn(run func(AddressRefKey) (AddressRef, error)) *MockAddressRefStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Filter provides a mock function for the type MockAddressRefStore
func (_mock *MockAddressRefStore) Filter(filters ...FilterFunc[AddressRefKey, AddressRef]) []AddressRef {
	ret := _mock.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 []AddressRef
	if returnFunc, ok := ret.Get(0).(func(...FilterFunc[AddressRefKey, AddressRef]) []AddressRef); ok {
		r0 = returnFunc(filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AddressRef)
		}
	}
	return r0
}

// MockAddressRefStore_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type MockAddressRefStore_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - filters ...FilterFunc[AddressRefKey, AddressRef]
func (_e *MockAddressRefStore_Expecter) Filter(filters interface{}) *MockAddressRefStore_Filter_Call {
	return &MockAddressRefStore_Filter_Call{Call: _e.mock.On("Filter", filters)}
}

func (_c *MockAddressRefStore_Filter_Call) Run(run func(filters ...FilterFunc[AddressRefKey, AddressRef])) *MockAddressRefStore_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]FilterFunc[AddressRefKey, AddressRef], len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(FilterFunc[AddressRefKey, AddressRef])
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockAddressRefStore_Filter_Call) Return(refs []AddressRef) *MockAddressRefStore_Filter_Call {
	_c.Call.Return(refs)
	return _c
}

func (_c *MockAddressRefStore_Filter_Call) RunAndReturn(run func(...FilterFunc[AddressRefKey, AddressRef]) []AddressRef) *MockAddressRefStore_Filter_Call {
	_c.Call.Return(run)
	return _c
}

