// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package datastore

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEnvMetadataStore creates a new instance of MockEnvMetadataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnvMetadataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnvMetadataStore {
	mock := &MockEnvMetadataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnvMetadataStore is an autogenerated mock type for the EnvMetadataStore type
type MockEnvMetadataStore struct {
	mock.Mock
}

type MockEnvMetadataStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnvMetadataStore) EXPECT() *MockEnvMetadataStore_Expecter {
	return &MockEnvMetadataStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockEnvMetadataStore
func (_mock *MockEnvMetadataStore) Get() (EnvMetadata, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 EnvMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (EnvMetadata, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() EnvMetadata); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(EnvMetadata)
	}

	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvMetadataStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEnvMetadataStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockEnvMetadataStore_Expecter) Get() *MockEnvMetadataStore_Get_Call {
	return &MockEnvMetadataStore_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockEnvMetadataStore_Get_Call) Run(run func()) *MockEnvMetadataStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvMetadataStore_Get_Call) Return(metadata EnvMetadata, err error) *MockEnvMetadataStore_Get_Call {
	_c.Call.Return(metadata, err)
	return _c
}

func (_c *MockEnvMetadataStore_Get_Call) RunAndReturn(run func() (EnvMetadata, error)) *MockEnvMetadataStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

